{"version":3,"file":"ui-router-sticky-states.js","sources":["../src/stickyStates.ts"],"sourcesContent":["import {\n  UIRouter, PathUtils, StateOrName, StateObject, StateDeclaration, PathNode, TreeChanges, Transition, UIRouterPluginBase,\n  TransitionHookPhase, TransitionHookScope, TransitionServicePluginAPI, HookMatchCriteria, TransitionStateHookFn,\n  HookRegOptions, PathType, find, tail, isString, isArray, inArray, removeFrom, pushTo, identity, anyTrueR, assertMap,\n  uniqR, defaultTransOpts, HookMatchCriterion\n} from \"@uirouter/core\";\n\ndeclare module \"@uirouter/core/lib/state/interface\" {\n  interface StateDeclaration {\n    sticky?: boolean;\n    onInactivate?: TransitionStateHookFn;\n    onReactivate?: TransitionStateHookFn;\n  }\n}\n\ndeclare module \"@uirouter/core/lib/state/stateObject\" {\n  interface StateObject {\n    sticky?: boolean;\n    onInactivate?: TransitionStateHookFn;\n    onReactivate?: TransitionStateHookFn;\n  }\n}\n\ndeclare module \"@uirouter/core/lib/transition/transitionService\" {\n  interface TransitionService {\n    onInactivate: (criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) => Function;\n    onReactivate: (criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions) => Function;\n  }\n}\n\ndeclare module \"@uirouter/core/lib/transition/interface\" {\n  interface TransitionOptions {\n    exitSticky: StateOrName[]|StateOrName;\n  }\n\n  interface TreeChanges {\n    inactivating?: PathNode[];\n    reactivating?: PathNode[];\n  }\n\n  export interface IMatchingNodes {\n    inactivating: PathNode[];\n    reactivating: PathNode[];\n  }\n\n  export interface PathTypes {\n    inactivating: PathType;\n    reactivating: PathType;\n  }\n\n  export interface HookMatchCriteria {\n    /** A [[HookMatchCriterion]] to match any state that would be inactivating */\n    inactivating?: HookMatchCriterion;\n    /** A [[HookMatchCriterion]] to match any state that would be reactivating */\n    reactivating?: HookMatchCriterion;\n  }\n}\n\nconst notInArray = (arr: any[]) => (item) => !inArray(arr, item);\n\nconst isChildOf = (parent: PathNode) =>\n    (node: PathNode) =>\n    node.state.parent === parent.state;\n\nconst isChildOfAny = (_parents: PathNode[]) => {\n  return (node: PathNode) =>\n      _parents.map(parent => isChildOf(parent)(node)).reduce(anyTrueR, false);\n};\n\nconst ancestorPath = (state: StateObject) =>\n    state.parent ? ancestorPath(state.parent).concat(state) : [state];\n\nconst isDescendantOf = (_ancestor: PathNode) => {\n  let ancestor = _ancestor.state;\n  return (node: PathNode) =>\n  ancestorPath(node.state).indexOf(ancestor) !== -1;\n};\n\nconst isDescendantOfAny = (ancestors: PathNode[]) =>\n    (node: PathNode) =>\n        ancestors.map(ancestor => isDescendantOf(ancestor)(node))\n            .reduce(anyTrueR, false);\n\nfunction findStickyAncestor(state: StateObject) {\n  return state.sticky ? state : findStickyAncestor(state.parent);\n}\n\n\n\n/**\n * Sorts fn that sorts by:\n * 1) node depth (how deep a state is nested)\n * 2) the order in which the state was inactivated (later in wins)\n */\nfunction nodeDepthThenInactivateOrder(inactives: PathNode[]) {\n  return function(l: PathNode, r: PathNode): number {\n    let depthDelta = (l.state.path.length - r.state.path.length);\n    return depthDelta !== 0 ? depthDelta : inactives.indexOf(r) - inactives.indexOf(l);\n  };\n}\nexport class StickyStatesPlugin extends UIRouterPluginBase {\n  name = \"sticky-states\";\n  private _inactives: PathNode[] = [];\n  private pluginAPI: TransitionServicePluginAPI;\n\n  constructor(public router: UIRouter) {\n    super();\n\n    this.pluginAPI = router.transitionService._pluginapi;\n\n    this._defineStickyPaths();\n    this._defineStickyEvents();\n    this._addCreateHook();\n    this._addStateCallbacks();\n    this._addDefaultTransitionOption();\n  }\n\n  inactives(): StateDeclaration[] {\n    return this._inactives.map(node => node.state.self);\n  }\n\n  private _addCreateHook() {\n    this.router.transitionService.onCreate({}, (trans) => {\n      trans['_treeChanges'] = this._calculateStickyTreeChanges(trans);\n    }, { priority: 100 });\n  }\n\n  private _defineStickyPaths() {\n    // let paths = this.pluginAPI._getPathTypes();\n    this.pluginAPI._definePathType(\"inactivating\", TransitionHookScope.STATE);\n    this.pluginAPI._definePathType(\"reactivating\", TransitionHookScope.STATE);\n  }\n\n  private _defineStickyEvents() {\n    let paths = this.pluginAPI._getPathTypes();\n    this.pluginAPI._defineEvent(\"onInactivate\", TransitionHookPhase.RUN, 5, paths.inactivating, true);\n    this.pluginAPI._defineEvent(\"onReactivate\", TransitionHookPhase.RUN, 35, paths.reactivating);\n  }\n\n  // Process state.onInactivate or state.onReactivate callbacks\n  private _addStateCallbacks() {\n    let inactivateCriteria = { inactivating: state => !!state.onInactivate };\n    this.router.transitionService.onInactivate(inactivateCriteria, (trans: Transition, state: StateDeclaration) =>\n        state.onInactivate(trans, state));\n\n    let reactivateCriteria = { reactivating: state => !!state.onReactivate };\n    this.router.transitionService.onReactivate(reactivateCriteria, (trans: Transition, state: StateDeclaration) =>\n        state.onReactivate(trans, state));\n  }\n\n\n  private _calculateExitSticky(tc: TreeChanges, trans: Transition) {\n    // Process the inactive states that are going to exit due to $stickyState.reset()\n    let exitSticky = trans.options().exitSticky || [];\n    if (!isArray(exitSticky)) exitSticky = [exitSticky];\n\n    let $state = trans.router.stateService;\n\n    let states: StateObject[] = (exitSticky as any[])\n        .map(assertMap((stateOrName) => $state.get(stateOrName), (state) => \"State not found: \" + state))\n        .map(state => state.$$state());\n\n    let potentialExitingStickies = this._inactives.concat(tc.inactivating).reduce(uniqR, []) as PathNode[];\n\n    let findInactive = state => potentialExitingStickies.find(node => node.state === state);\n    const notInactiveMsg = (state) => \"State not inactive: \" + state;\n    let exitingInactives = states.map(assertMap(findInactive, notInactiveMsg));\n    let exiting = potentialExitingStickies.filter(isDescendantOfAny(exitingInactives));\n\n    let inToPathMsg = (node) => \"Can not exit a sticky state that is currently active/activating: \" + node.state.name;\n    exiting.map(assertMap(node => !inArray(tc.to, node), inToPathMsg));\n\n    return exiting;\n  }\n\n  private _calculateStickyTreeChanges(trans: Transition): TreeChanges {\n    let tc: TreeChanges = trans.treeChanges();\n    tc.inactivating = [];\n    tc.reactivating = [];\n\n    /****************\n     * Process states that are about to be inactivated\n     ****************/\n\n    if (tc.entering.length && tc.exiting[0] && tc.exiting[0].state.sticky) {\n      tc.inactivating = tc.exiting;\n      tc.exiting = [];\n    }\n\n    /****************\n     * Determine which states are about to be reactivated\n     ****************/\n\n    // Simulate a transition where the fromPath is a clone of the toPath, but use the inactivated nodes\n    // This will calculate which inactive nodes that need to be exited/entered due to param changes\n    let inactiveFromPath = tc.retained.concat(tc.entering.map(node => this._getInactive(node) || null)).filter(identity);\n    let simulatedTC = PathUtils.treeChanges(inactiveFromPath, tc.to, trans.options().reloadState);\n\n    let shouldRewritePaths = ['retained', 'entering', 'exiting'].some(path => !!simulatedTC[path].length);\n\n    if (shouldRewritePaths) {\n      // The 'retained' nodes from the simulated transition's TreeChanges are the ones that will be reactivated.\n      // (excluding the nodes that are in the original retained path)\n      tc.reactivating = simulatedTC.retained.slice(tc.retained.length);\n\n      // Entering nodes are the same as the simulated transition's entering\n      tc.entering = simulatedTC.entering;\n\n      // The simulatedTC 'exiting' nodes are inactives that are being exited because:\n      // - The inactive state's params changed\n      // - The inactive state is being reloaded\n      // - The inactive state is a child of the to state\n      tc.exiting = tc.exiting.concat(simulatedTC.exiting);\n\n      // Rewrite the to path\n      tc.to = tc.retained.concat(tc.reactivating).concat(tc.entering);\n    }\n\n    /****************\n     * Determine which additional inactive states should be exited\n     ****************/\n\n    let inactives = this._inactives;\n\n    // Any inactive state whose parent state is exactly activated will be exited\n    let childrenOfToState = inactives.filter(isChildOf(tail(tc.to)));\n\n    // Any inactive non-sticky state whose parent state is activated (and is itself not activated) will be exited\n    let childrenOfToPath = inactives.filter(isChildOfAny(tc.to))\n        .filter(notInArray(tc.to))\n        .filter(node => !node.state.sticky);\n\n    let exitingChildren = childrenOfToState.concat(childrenOfToPath).filter(notInArray(tc.exiting));\n\n    let exitingRoots = tc.exiting.concat(exitingChildren);\n\n    // Any inactive descendant of an exiting state will be exited\n    let orphans = inactives.filter(isDescendantOfAny(exitingRoots))\n        .filter(notInArray(exitingRoots))\n        .concat(exitingChildren)\n        .reduce<PathNode[]>(uniqR, [])\n        .sort(nodeDepthThenInactivateOrder(inactives));\n\n    tc.exiting = orphans.concat(tc.exiting);\n\n    // commit all changes to inactives after transition is successful\n    trans.onSuccess({}, () => {\n      tc.exiting.forEach(removeFrom(this._inactives));\n      tc.entering.forEach(removeFrom(this._inactives));\n      tc.reactivating.forEach(removeFrom(this._inactives));\n      tc.inactivating.forEach(pushTo(this._inactives));\n    });\n\n    // console.log('inactives will be:', inactives.map(x => x.state.name));\n\n    // let tcCopy: any = Object.assign({}, tc);\n    // Object.keys(tcCopy).forEach(key => tcCopy[key] = tcCopy[key].map(x => x.state.name));\n    // console.table(tcCopy);\n\n    // Process the inactive sticky states that should be exited\n    let exitSticky = this._calculateExitSticky(tc, trans);\n    exitSticky.filter(notInArray(tc.exiting)).forEach(pushTo(tc.exiting));\n\n    // Also process the active sticky states that are about to be inactivated, but should be exited\n    exitSticky.filter(inArray(tc.inactivating)).forEach(removeFrom(tc.inactivating));\n\n    return tc;\n  }\n\n\n  private _addDefaultTransitionOption() {\n    defaultTransOpts.exitSticky = [];\n  }\n\n  /**\n   * Exits inactive sticky state(s)\n   *\n   * #### Example:\n   * ```js\n   * $stickyState.exitSticky('inactivestate');\n   * ```\n   *\n   * ```js\n   * $stickyState.exitSticky([ 'inactivestate1', 'inactivestate2' ]);\n   * ```\n   *\n   * ```js\n   * // exit all inactive stickies\n   * $stickyState.exitSticky();\n   * ```\n   *\n   * ```js\n   * // exit all inactive stickies\n   * $stickyState.exitSticky($stickyState.inactives());\n   * ```\n   * @param states The state name, or an array of state names\n   */\n  exitSticky();\n  exitSticky(states: StateOrName);\n  exitSticky(states: StateOrName[]);\n  exitSticky(states?: any) {\n    let $state = this.router.stateService;\n    if (states === undefined) states = this._inactives.map(node => node.state.name);\n    if (isString(states)) states = [states];\n\n    return $state.go($state.current, {}, {\n      inherit: true,\n      exitSticky: states\n    });\n  }\n\n  _getInactive = (node) =>\n    node && find(this._inactives, n => n.state === node.state);\n}\n\n\n"],"names":["inArray","anyTrueR","find","TransitionHookScope","TransitionHookPhase","isArray","assertMap","uniqR","identity","PathUtils","tail","removeFrom","pushTo","defaultTransOpts","isString","UIRouterPluginBase"],"mappings":"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"}