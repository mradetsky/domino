/**
 * UI-Router Deep State Redirect: redirect to the most recently activated child state
 * @version v1.0.2
 * @link https://ui-router.github.io
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@uirouter/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@uirouter/core'], factory) :
	(factory((global['@uirouter/dsr'] = global['@uirouter/dsr'] || {}),global['@uirouter/core']));
}(this, (function (exports,_uirouter_core) { 'use strict';

function DSRPlugin($uiRouter) {
    var $transitions = $uiRouter.transitionService;
    var $state = $uiRouter.stateService;
    $transitions.onRetain({ retained: getDsr }, recordDeepState);
    $transitions.onEnter({ entering: getDsr }, recordDeepState);
    $transitions.onBefore({ to: getDsr }, deepStateRedirect);
    function getDsr(state) {
        return state.deepStateRedirect || state.dsr;
    }
    function getConfig(state) {
        var dsrProp = getDsr(state);
        var propType = typeof dsrProp;
        if (propType === 'undefined')
            return;
        var params;
        var defaultTarget = propType === 'string' ? dsrProp : undefined;
        var fn = propType === 'function' ? dsrProp : undefined;
        if (propType === 'object') {
            fn = dsrProp.fn;
            var defaultType = typeof dsrProp.default;
            if (defaultType === 'object') {
                defaultTarget = $state.target(dsrProp.default.state, dsrProp.default.params, dsrProp.default.options);
            }
            else if (defaultType === 'string') {
                defaultTarget = $state.target(dsrProp.default);
            }
            if (dsrProp.params === true) {
                params = function () {
                    return true;
                };
            }
            else if (Array.isArray(dsrProp.params)) {
                params = function (param) {
                    return dsrProp.params.indexOf(param.id) !== -1;
                };
            }
        }
        fn = fn || (function (transition, target) { return target; });
        return { params: params, default: defaultTarget, fn: fn };
    }
    function paramsEqual(state, transParams, schemaMatchFn, negate) {
        if (negate === void 0) { negate = false; }
        schemaMatchFn = schemaMatchFn || (function () { return true; });
        var schema = state.parameters({ inherit: true }).filter(schemaMatchFn);
        return function (redirect) {
            var equals = _uirouter_core.Param.equals(schema, redirect.triggerParams, transParams);
            return negate ? !equals : equals;
        };
    }
    function recordDeepState(transition, state) {
        var paramsConfig = getConfig(state).params;
        transition.promise.then(function () {
            var transTo = transition.to();
            var transParams = transition.params();
            var recordedDsrTarget = $state.target(transTo, transParams);
            if (paramsConfig) {
                state.$dsr = (state.$dsr || []).filter(paramsEqual(transTo.$$state(), transParams, undefined, true));
                state.$dsr.push({ triggerParams: transParams, target: recordedDsrTarget });
            }
            else {
                state.$dsr = recordedDsrTarget;
            }
        });
    }
    function deepStateRedirect(transition) {
        var opts = transition.options();
        if (opts['ignoreDsr'] || (opts.custom && opts.custom.ignoreDsr))
            return;
        var config = getConfig(transition.to());
        var redirect = getDeepStateRedirect(transition.to(), transition.params());
        redirect = config.fn(transition, redirect);
        if (redirect && redirect.state() === transition.to())
            return;
        return redirect;
    }
    function getDeepStateRedirect(stateOrName, params) {
        var state = $state.get(stateOrName);
        var dsrTarget, config = getConfig(state);
        var $$state = state.$$state();
        if (config.params) {
            var predicate = paramsEqual($$state, params, config.params, false);
            var match = $$state['$dsr'] && $$state['$dsr'].filter(predicate)[0];
            dsrTarget = match && match.target;
        }
        else {
            dsrTarget = $$state['$dsr'];
        }
        dsrTarget = dsrTarget || config.default;
        if (dsrTarget) {
            // merge original params with deep state redirect params
            var targetParams = Object.assign({}, params, dsrTarget.params());
            dsrTarget = $state.target(dsrTarget.state(), targetParams, dsrTarget.options());
        }
        return dsrTarget;
    }
    return {
        name: 'deep-state-redirect',
        reset: function (state, params) {
            if (!state) {
                $state.get().forEach(function (state) { return delete state.$$state()['$dsr']; });
            }
            else if (!params) {
                delete $state.get(state).$$state()['$dsr'];
            }
            else {
                var $$state = $state.get(state).$$state();
                $$state['$dsr'] = $$state['$dsr'].filter(paramsEqual($$state, params, null, true));
            }
        },
        getRedirect: function (state, params) {
            return getDeepStateRedirect(state, params);
        },
    };
}

exports.DSRPlugin = DSRPlugin;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ui-router-dsr.js.map
