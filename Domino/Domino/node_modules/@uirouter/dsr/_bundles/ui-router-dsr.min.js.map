{"version":3,"file":"ui-router-dsr.min.js","sources":["../src/dsr.ts"],"sourcesContent":["import {\n    StateObject, StateDeclaration, Param, UIRouter, RawParams, StateOrName, TargetState, Transition\n} from \"@uirouter/core\";\n\ndeclare module \"@uirouter/core\" {\n  interface StateDeclaration {\n    dsr?: any;\n    deepStateRedirect?: any;\n  }\n}\n\nfunction DSRPlugin($uiRouter: UIRouter): any {\n  let $transitions = $uiRouter.transitionService;\n  let $state = $uiRouter.stateService;\n\n  $transitions.onRetain({ retained: getDsr }, recordDeepState);\n  $transitions.onEnter({ entering: getDsr }, recordDeepState);\n  $transitions.onBefore({ to: getDsr }, deepStateRedirect);\n\n  function getDsr(state: StateDeclaration) {\n    return state.deepStateRedirect || state.dsr;\n  }\n\n  function getConfig(state: StateDeclaration) {\n    let dsrProp: any = getDsr(state);\n    let propType: string = typeof dsrProp;\n    if (propType === 'undefined') return;\n\n    let params;\n    let defaultTarget = propType === 'string' ? dsrProp : undefined;\n    let fn: Function = propType === 'function' ? dsrProp : undefined;\n\n    if (propType === 'object') {\n      fn = dsrProp.fn;\n      let defaultType = typeof dsrProp.default;\n      if (defaultType === 'object') {\n        defaultTarget = $state.target(dsrProp.default.state, dsrProp.default.params, dsrProp.default.options);\n      } else if (defaultType === 'string') {\n        defaultTarget = $state.target(dsrProp.default);\n      }\n      if (dsrProp.params === true) {\n        params = function () {\n          return true;\n        }\n      } else if (Array.isArray(dsrProp.params)) {\n        params = function (param: Param) {\n          return dsrProp.params.indexOf(param.id) !== -1;\n        }\n      }\n    }\n\n    fn = fn || ((transition, target) => target);\n\n    return { params: params, default: defaultTarget, fn: fn };\n  }\n\n  function paramsEqual(state: StateObject, transParams: RawParams, schemaMatchFn?: (param?: Param) => boolean, negate = false) {\n    schemaMatchFn = schemaMatchFn || (() => true);\n    let schema = state.parameters({ inherit: true }).filter(schemaMatchFn);\n    return function (redirect) {\n      let equals = Param.equals(schema, redirect.triggerParams, transParams);\n      return negate ? !equals : equals;\n    }\n  }\n\n  function recordDeepState(transition, state) {\n    let paramsConfig = getConfig(state).params;\n\n    transition.promise.then(function () {\n      let transTo = transition.to();\n      let transParams = transition.params();\n      let recordedDsrTarget = $state.target(transTo, transParams);\n\n      if (paramsConfig) {\n        state.$dsr = (state.$dsr || []).filter(paramsEqual(transTo.$$state(), transParams, undefined, true));\n        state.$dsr.push({ triggerParams: transParams, target: recordedDsrTarget });\n      } else {\n        state.$dsr = recordedDsrTarget;\n      }\n    });\n  }\n\n  function deepStateRedirect(transition: Transition) {\n    let opts = transition.options();\n    if (opts['ignoreDsr'] || (opts.custom && opts.custom.ignoreDsr)) return;\n\n    let config = getConfig(transition.to());\n    let redirect = getDeepStateRedirect(transition.to(), transition.params());\n    redirect = config.fn(transition, redirect);\n    if (redirect && redirect.state() === transition.to()) return;\n\n    return redirect;\n  }\n\n  function getDeepStateRedirect(stateOrName: StateOrName, params: RawParams) {\n    let state = $state.get(stateOrName);\n    let dsrTarget, config = getConfig(state);\n    let $$state = state.$$state();\n\n    if (config.params) {\n      var predicate = paramsEqual($$state, params, config.params, false);\n      let match = $$state['$dsr'] && $$state['$dsr'].filter(predicate)[0];\n      dsrTarget = match && match.target;\n    } else {\n      dsrTarget = $$state['$dsr'];\n    }\n\n    dsrTarget = dsrTarget || config.default;\n\n    if (dsrTarget) {\n      // merge original params with deep state redirect params\n      let targetParams = Object.assign({}, params, dsrTarget.params());\n      dsrTarget = $state.target(dsrTarget.state(), targetParams, dsrTarget.options());\n    }\n\n    return dsrTarget;\n  }\n\n  return {\n    name: 'deep-state-redirect',\n\n    reset: function(state: StateOrName, params?: RawParams) {\n      if (!state) {\n        $state.get().forEach(state => delete state.$$state()['$dsr']);\n      } else if (!params) {\n        delete $state.get(state).$$state()['$dsr']\n      } else {\n        var $$state = $state.get(state).$$state();\n        $$state['$dsr'] = $$state['$dsr'].filter(paramsEqual($$state, params, null, true));\n      }\n    },\n\n    getRedirect: function (state: StateOrName, params?: RawParams) {\n      return getDeepStateRedirect(state, params);\n    },\n  };\n}\n\nexport { DSRPlugin };\n"],"names":["$uiRouter","state","deepStateRedirect","dsr","dsrProp","getDsr","propType","params","defaultTarget","undefined","fn","defaultType","default","$state","target","options","Array","isArray","param","indexOf","id","transition","transParams","schemaMatchFn","negate","schema","parameters","inherit","filter","redirect","equals","Param","triggerParams","paramsConfig","getConfig","promise","then","transTo","to","recordedDsrTarget","$dsr","paramsEqual","$$state","push","opts","custom","ignoreDsr","config","getDeepStateRedirect","stateOrName","dsrTarget","get","predicate","match","targetParams","Object","assign","$transitions","transitionService","stateService","onRetain","retained","recordDeepState","onEnter","entering","onBefore","name","reset","forEach","getRedirect"],"mappings":"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"}